<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <title>Mobile Tic-Tac-Toe</title>
    <style>
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
            -webkit-tap-highlight-color: transparent;
        }
        
        body {
            font-family: 'Arial', sans-serif;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            min-height: 100vh;
            background: #f0f2f5;
            padding: 20px;
            touch-action: manipulation;
        }
        
        h1 {
            color: #2c3e50;
            margin-bottom: 20px;
            font-size: 2rem;
            text-align: center;
        }
        
        .game-info {
            margin: 15px 0;
            font-size: 1.3rem;
            color: #34495e;
            font-weight: bold;
            text-align: center;
        }
        
        .score-container {
            display: flex;
            justify-content: space-around;
            width: 100%;
            max-width: 300px;
            margin-bottom: 15px;
        }
        
        .score-box {
            background: #3498db;
            color: white;
            padding: 10px 15px;
            border-radius: 8px;
            font-weight: bold;
            min-width: 80px;
            text-align: center;
        }
        
        .score-box.highlight {
            background: #e74c3c;
            box-shadow: 0 0 10px rgba(231, 76, 60, 0.5);
        }
        
        .game-container {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            grid-template-rows: repeat(3, 1fr);
            gap: 10px;
            width: 100%;
            max-width: 300px;
            aspect-ratio: 1/1;
            margin: 0 auto;
        }
        
        .cell {
            background: white;
            border-radius: 10px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 3rem;
            font-weight: bold;
            cursor: pointer;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            transition: all 0.3s ease;
            user-select: none;
        }
        
        .cell:active {
            transform: scale(0.95);
        }
        
        .cell.x {
            color: #e74c3c;
        }
        
        .cell.o {
            color: #3498db;
        }
        
        .cell.win {
            background: #2ecc71;
            color: white;
        }
        
        .controls {
            margin-top: 20px;
            display: flex;
            gap: 15px;
        }
        
        button {
            background: #2c3e50;
            color: white;
            border: none;
            padding: 12px 20px;
            border-radius: 8px;
            font-size: 1rem;
            font-weight: bold;
            cursor: pointer;
            transition: background 0.3s;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }
        
        button:active {
            background: #1a252f;
            transform: scale(0.98);
        }
        
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            align-items: center;
            justify-content: center;
            z-index: 100;
        }
        
        .modal-content {
            background: white;
            padding: 20px;
            border-radius: 10px;
            text-align: center;
            max-width: 80%;
        }
        
        .modal h2 {
            margin-bottom: 15px;
            color: #2c3e50;
        }
        
        @media (max-width: 400px) {
            h1 {
                font-size: 1.5rem;
            }
            
            .game-info {
                font-size: 1.1rem;
            }
            
            .cell {
                font-size: 2.5rem;
            }
        }
    </style>
</head>
<body>
    <h1>Tic-Tac-Toe</h1>
    
    <div class="game-info" id="turn-indicator">Player X's Turn</div>
    
    <div class="score-container">
        <div class="score-box" id="score-x">
            Player X: <span id="x-score">0</span>
        </div>
        <div class="score-box" id="score-o">
            Player O: <span id="o-score">0</span>
        </div>
    </div>
    
    <div class="game-container" id="game-board">
        <div class="cell" data-index="0"></div>
        <div class="cell" data-index="1"></div>
        <div class="cell" data-index="2"></div>
        <div class="cell" data-index="3"></div>
        <div class="cell" data-index="4"></div>
        <div class="cell" data-index="5"></div>
        <div class="cell" data-index="6"></div>
        <div class="cell" data-index="7"></div>
        <div class="cell" data-index="8"></div>
    </div>
    
    <div class="controls">
        <button id="reset-btn">New Game</button>
        <button id="mode-btn">Switch to vs AI</button>
    </div>
    
    <div class="modal" id="result-modal">
        <div class="modal-content">
            <h2 id="result-text">X Wins!</h2>
            <button id="modal-btn">Play Again</button>
        </div>
    </div>
    
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            // Game state variables
            let board = ['', '', '', '', '', '', '', '', ''];
            let currentPlayer = 'X';
            let gameActive = true;
            let scores = { X: 0, O: 0 };
            let gameMode = 'pvp'; // 'pvp' or 'ai'
            
            // DOM elements
            const cells = document.querySelectorAll('.cell');
            const turnIndicator = document.getElementById('turn-indicator');
            const xScoreElement = document.getElementById('x-score');
            const oScoreElement = document.getElementById('o-score');
            const scoreXBox = document.getElementById('score-x');
            const scoreOBox = document.getElementById('score-o');
            const resetBtn = document.getElementById('reset-btn');
            const modeBtn = document.getElementById('mode-btn');
            const resultModal = document.getElementById('result-modal');
            const resultText = document.getElementById('result-text');
            const modalBtn = document.getElementById('modal-btn');
            
            // Winning combinations
            const winningConditions = [
                [0, 1, 2], [3, 4, 5], [6, 7, 8], // rows
                [0, 3, 6], [1, 4, 7], [2, 5, 8], // columns
                [0, 4, 8], [2, 4, 6]             // diagonals
            ];
            
            // Initialize game
            function initGame() {
                board = ['', '', '', '', '', '', '', '', ''];
                currentPlayer = 'X';
                gameActive = true;
                
                // Clear board UI
                cells.forEach(cell => {
                    cell.textContent = '';
                    cell.classList.remove('x', 'o', 'win');
                });
                
                // Update UI
                updateTurnIndicator();
                highlightCurrentPlayer();
            }
            
            // Update turn indicator
            function updateTurnIndicator() {
                if (gameMode === 'pvp') {
                    turnIndicator.textContent = `Player ${currentPlayer}'s Turn`;
                } else {
                    turnIndicator.textContent = currentPlayer === 'X' 
                        ? 'Your Turn (X)' 
                        : 'AI Thinking...';
                }
            }
            
            // Highlight current player's score
            function highlightCurrentPlayer() {
                if (currentPlayer === 'X') {
                    scoreXBox.classList.add('highlight');
                    scoreOBox.classList.remove('highlight');
                } else {
                    scoreOBox.classList.add('highlight');
                    scoreXBox.classList.remove('highlight');
                }
            }
            
            // Handle cell click
            function handleCellClick(e) {
                const clickedCell = e.target;
                const clickedCellIndex = parseInt(clickedCell.getAttribute('data-index'));
                
                // If cell already filled or game not active, ignore
                if (board[clickedCellIndex] !== '' || !gameActive) return;
                
                // Process player move
                processMove(clickedCellIndex, currentPlayer);
                
                // If vs AI and game still active, make AI move
                if (gameMode === 'ai' && gameActive && currentPlayer === 'O') {
                    setTimeout(makeAIMove, 500); // Delay for better UX
                }
            }
            
            // Process a move
            function processMove(cellIndex, player) {
                // Update board state
                board[cellIndex] = player;
                
                // Update UI
                const cell = document.querySelector(`.cell[data-index="${cellIndex}"]`);
                cell.textContent = player;
                cell.classList.add(player.toLowerCase());
                
                // Check for win or draw
                if (checkWin(player)) {
                    handleWin(player);
                } else if (checkDraw()) {
                    handleDraw();
                } else {
                    // Switch player
                    currentPlayer = player === 'X' ? 'O' : 'X';
                    updateTurnIndicator();
                    highlightCurrentPlayer();
                }
            }
            
            // Check for win
            function checkWin(player) {
                return winningConditions.some(condition => {
                    return condition.every(index => {
                        return board[index] === player;
                    });
                });
            }
            
            // Check for draw
            function checkDraw() {
                return board.every(cell => cell !== '');
            }
            
            // Handle win
            function handleWin(player) {
                gameActive = false;
                
                // Highlight winning cells
                const winningCombo = winningConditions.find(condition => {
                    return condition.every(index => board[index] === player);
                });
                
                winningCombo.forEach(index => {
                    document.querySelector(`.cell[data-index="${index}"]`).classList.add('win');
                });
                
                // Update scores
                scores[player]++;
                updateScores();
                
                // Show result modal
                resultText.textContent = gameMode === 'pvp' 
                    ? `Player ${player} Wins!` 
                    : player === 'X' ? 'You Win!' : 'AI Wins!';
                resultModal.style.display = 'flex';
            }
            
            // Handle draw
            function handleDraw() {
                gameActive = false;
                resultText.textContent = 'Game Draw!';
                resultModal.style.display = 'flex';
            }
            
            // Update score display
            function updateScores() {
                xScoreElement.textContent = scores.X;
                oScoreElement.textContent = scores.O;
            }
            
            // AI move (simple random)
            function makeAIMove() {
                if (!gameActive) return;
                
                // Find all empty cells
                const emptyCells = board
                    .map((cell, index) => cell === '' ? index : null)
                    .filter(val => val !== null);
                
                if (emptyCells.length > 0) {
                    // Random selection (can be improved with minimax algorithm)
                    const randomIndex = Math.floor(Math.random() * emptyCells.length);
                    const aiChoice = emptyCells[randomIndex];
                    
                    processMove(aiChoice, 'O');
                }
            }
            
            // Toggle game mode
            function toggleGameMode() {
                gameMode = gameMode === 'pvp' ? 'ai' : 'pvp';
                modeBtn.textContent = gameMode === 'pvp' ? 'Switch to vs AI' : 'Switch to 2 Players';
                resetScores();
                initGame();
            }
            
            // Reset scores
            function resetScores() {
                scores = { X: 0, O: 0 };
                updateScores();
            }
            
            // Event listeners
            cells.forEach(cell => {
                cell.addEventListener('click', handleCellClick);
                // Touch support
                cell.addEventListener('touchstart', handleCellClick, { passive: true });
            });
            
            resetBtn.addEventListener('click', initGame);
            modeBtn.addEventListener('click', toggleGameMode);
            modalBtn.addEventListener('click', () => {
                resultModal.style.display = 'none';
                initGame();
            });
            
            // Initialize the game
            initGame();
        });
    </script>
</body>
</html>
